//
//  ListTagsViewController.swift
//  Scanner
//
//  Created by Zaizen Kaegyoshi on 4/17/19.
//  Copyright (c) 2019 zzzz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListTagsDisplayLogic: class
{
    func displayTags(vm: ListTags.FetchTags.ViewModel)
    func dismiss()
}

class ListTagsViewController: UIViewController, ListTagsDisplayLogic
{
    
    var interactor: ListTagsBusinessLogic?
    var router: (NSObjectProtocol & ListTagsRoutingLogic & ListTagsDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ListTagsInteractor()
        let presenter = ListTagsPresenter()
        let router = ListTagsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.setupTableView(tableView: self.tagTableView, cellsToRegister: [TagTableViewCell.self], estimatedHeight: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(fetchTags), name: .tagDataChanged, object: nil)
        self.fetchTags()
    }
    func setupTableView(tableView: UITableView, cellsToRegister: Array<DisplayableCell.Type>, estimatedHeight: CGFloat?) {
        if let h = estimatedHeight {
            tableView.rowHeight = UITableView.automaticDimension
            tableView.estimatedRowHeight = h
        } else {
            tableView.rowHeight = 48
        }
        for cellType in cellsToRegister {
            tableView.register(UINib(nibName: cellType.nibName, bundle: nil), forCellReuseIdentifier: cellType.identifier)
        }
    }
    
    // MARK: Do something
    var tags: [ListTags.TagModel] = []
    var showingFolders: Bool = false
    
    var isManaging: Bool = false
    var disableTouchToDismiss = false
    
    
    @IBOutlet weak var tagTableView: UITableView!
    @IBOutlet weak var alertView: UIView!
    @IBOutlet weak var addTagButton: UIButton!
    
    @IBAction func clearSelection() {
        for (i, _) in self.tags.enumerated() {
            self.tags[i].selected = false
        }
        self.tagTableView.reloadData()
    }
    @IBAction func done() {
        self.selectTags()
    }
    @IBAction func manageTags() {
        if isManaging {
            self.addTagButton.setTitle("New Tag", for: .normal)
            self.addTagButton.backgroundColor = UIColor.flatGray()
            self.isManaging = false
        } else {
            self.addTagButton.setTitle("Delete Tags", for: .normal)
            self.addTagButton.backgroundColor = UIColor.flatRed()
            self.isManaging = true
        }
        
    }
    @IBAction func actOnSelection() {
        if isManaging {
            self.interactor?.deleteTags(request: ListTags.SelectTags.Request.init(selectedTags: self.tags))
        } else {
            self.disableTouchToDismiss = true
            self.router?.routeToAddTag()
        }
    }
    
    @objc func fetchTags() {
        self.interactor?.fetchTags()
    }
    
    func displayTags(vm: ListTags.FetchTags.ViewModel) {
        self.tags = vm.tags
        self.showingFolders = vm.showingFolders
        self.tagTableView.reloadData()
    }
    func selectTags() {
        self.interactor?.selectTags(request: ListTags.SelectTags.Request.init(selectedTags: self.tags))
    }
    func dismiss() {
        self.router?.dismiss()
    }
}
extension ListTagsViewController {
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        if !disableTouchToDismiss {
            var touch: UITouch? = touches.first
            //location is relative to the current view
            // do something with the touched point
            if touch?.view != self.alertView {
                self.selectTags()
                
            }
        }
        
    }
}

extension ListTagsViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
        return self.tags.count
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let row = indexPath.row
       
        let cell = tableView.dequeueReusableCell(withIdentifier: TagTableViewCell.identifier) as! TagTableViewCell
        let model = self.tags[indexPath.row]
        cell.setCell(name: model.name , color: model.color, depth: model.depth, selected: model.selected)
        return cell
    }
}
extension ListTagsViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if self.showingFolders {
            var selectedIndexes: [IndexPath] = []
            for (i, tag) in self.tags.enumerated() {
                if tag.selected {
                    self.tags[i].selected = false
                    let selectedIndex = IndexPath(row: i, section: 0)
                    selectedIndexes.append(selectedIndex)
                }
            }
            tableView.reloadRows(at: selectedIndexes, with: .automatic)
        }
        
        self.tags[indexPath.row].selected = !self.tags[indexPath.row].selected
        tableView.reloadRows(at: [indexPath], with: .automatic)
        
    }
}
