//
//  AddTagViewController.swift
//  Scanner
//
//  Created by Zaizen Kaegyoshi on 5/1/19.
//  Copyright (c) 2019 zzzz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AddTagDisplayLogic: class
{
    func dismiss()
}

class AddTagViewController: UIViewController, AddTagDisplayLogic
{
    var interactor: AddTagBusinessLogic?
    var router: (NSObjectProtocol & AddTagRoutingLogic & AddTagDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
        
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = AddTagInteractor()
        let presenter = AddTagPresenter()
        let router = AddTagRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
    }
    
    
    
    // MARK: Do something
    
    @IBOutlet weak var nameTextField: UITextField!
    
    @IBAction func saveTag() {
        if nameTextField.text != nil && nameTextField.text != "" {
            self.interactor?.addTag(request: AddTag.AddTag.Request.init(name: self.nameTextField.text!))
        }
        
    }
    
    @IBAction func dismiss() {
        self.router?.dismiss()
    }
    
    
}
extension AddTagViewController: UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        self.view.endEditing(true)
        return false
    }
}
