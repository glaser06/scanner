//
//  ShowFileInteractor.swift
//  Scanner
//
//  Created by Zaizen Kaegyoshi on 4/11/19.
//  Copyright (c) 2019 zzzz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ShowFileBusinessLogic
{
    func saveFile(request: ShowFile.SaveFile.Request)
    func saveState(request: ShowFile.SaveFile.Request)
    func fetchFile()
}

protocol ShowFileDataStore
{
    var file: File? { get set }
}

class ShowFileInteractor: ShowFileBusinessLogic, ShowFileDataStore
{
    var presenter: ShowFilePresentationLogic?
    var worker: ShowFileWorker?
//    var fileWorker : FileWorker!
    var fpManager = FilePageManager.sharedInstance
    var file: File?
    var isNewFile: Bool = false
    
    
    // MARK: Do something
    func fetchFile() {
        if let f = self.file {
            let fileWorker = FileWorker()
            if f.pages.isEmpty {
                if let fileWithPages = fileWorker.fetchPagesFor(file: f) {
                    self.file = fileWithPages
                }
            }
            print(f.tags)
            
            
            self.presenter?.presentFile(response: ShowFile.FetchFile.Response.init(file: self.file!))
        } else {
            self.isNewFile = true
            self.file = FileWorker.newFile()
            self.presenter?.presentNewFile(response: ShowFile.FetchFile.Response.init(file: file!))
        }
    }
    func saveState(request: ShowFile.SaveFile.Request) {
        let images = request.file.pageImages
        self.file!.name = request.file.name
        self.file!.notes = request.file.notes
        
        
        let fileWorker = FileWorker()
        if self.isNewFile {
            self.file = fileWorker.addNewPagesTo(file: self.file!, pageImages: images )
            print(self.file?.tags)
            
        } else {
            var newPages: [Page] = []
            for (i, pageImage) in images.enumerated() {
                if i >= self.file!.pages.count {
                    let page = Page(file: self.file!)
                    page.image = pageImage
                    page.pageNumber = i
                    page.pageName = "\(self.file!.identifier)page\(page.pageNumber)"
                    newPages.append(page)
                }
            }
            self.file?.pages.append(contentsOf: newPages)
            
        }
        
        
    }
    func saveFile(request: ShowFile.SaveFile.Request) {
        let images = request.file.pageImages
        self.file!.name = request.file.name
        self.file!.notes = request.file.notes
        
        
        let fileWorker = FileWorker()
        if self.isNewFile {
            self.file = fileWorker.addNewPagesTo(file: self.file!, pageImages: images )
            print(self.file?.tags)
            self.file?.write(dataStore: fpManager)
        } else {
            var newPages: [Page] = []
            for (i, pageImage) in images.enumerated() {
                if i >= self.file!.pages.count {
                    let page = Page(file: self.file!)
                    page.image = pageImage
                    page.pageNumber = i
                    page.pageName = "\(self.file!.identifier)page\(page.pageNumber)"
                    newPages.append(page)
                }
            }
            self.file?.pages.append(contentsOf: newPages)
            self.file?.write(dataStore: fpManager)
        }
        
        self.file = nil
        self.presenter?.dismiss()
        
    }
    
    
//    func doSomething(request: ShowFile.Something.Request)
//    {
//        worker = ShowFileWorker()
//        worker?.doSomeWork()
//
//        let response = ShowFile.Something.Response()
//        presenter?.presentSomething(response: response)
//    }
}
