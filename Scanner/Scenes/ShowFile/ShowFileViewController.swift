//
//  ShowFileViewController.swift
//  Scanner
//
//  Created by Zaizen Kaegyoshi on 4/11/19.
//  Copyright (c) 2019 zzzz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import DeviceKit
import WeScan
import MapKit

protocol ShowFileDisplayLogic: class
{
    func displayNewFile(vm: ShowFile.FetchFile.ViewModel)
    func displayFile(vm: ShowFile.FetchFile.ViewModel)
    func dismiss(animated: Bool, completion: (() -> Void)?)
}

class ShowFileViewController: UIViewController, ShowFileDisplayLogic
{
    var interactor: ShowFileBusinessLogic?
    var router: (NSObjectProtocol & ShowFileRoutingLogic & ShowFileDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ShowFileInteractor()
        let presenter = ShowFilePresenter()
        let router = ShowFileRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
//        self.addSwipeGesture()
        self.setupPageCollectionView()
//        self.view.isHidden = true
        self.refresher = UIRefreshControl()
        self.scrollView.refreshControl = self.refresher!
        self.refresher?.addTarget(self, action: #selector(showFormTemplates), for: .allEvents)
        
        self.notesTextView.text = "Add Notes..."
        self.notesTextView.textColor = UIColor.lightGray
//        let refreshImage = UIImageView()
//        refreshImage.image = UIImage(named: "search")
//        refreshImage.frame = self.refresher!.bounds.offsetBy(dx: self.view.frame.size.width / 2 - 16, dy: 10)
//        refreshImage.frame.size.width = 24 // Whatever width you want
//        refreshImage.frame.size.height = 24 // Whatever height you want
//        self.refresherImage = refreshImage
//        self.refresher?.backgroundColor = UIColor.clear
//        self.refresher?.tintColor = UIColor.clear
//        self.refresher?.addSubview(refreshImage)
        
        
        
        self.tagSource = TagCollectionSource(cellID: ShowTagsCollectionViewCell.identifier, emptyData: ListFiles.TagModel.empty())
        self.setupTagCollectionView()
        self.setupFormTableView()
        
        self.view.setNeedsLayout()
        self.view.layoutIfNeeded()
        
        self.addTagSelectionTap()
        self.fetchFile()
    }
    var openToScan: Bool = false
    
    override func viewWillAppear(_ animated: Bool) {
//        self.view.isHidden = openToScan
        
    }
    
    
    override func viewDidAppear(_ animated: Bool) {
        if openToScan {
//            self.addNewPage()
            openToScan = false
        } else {

        }
    }
    func addTagSelectionTap() {
        let tap = UITapGestureRecognizer(target: self, action: #selector(self.showTagSelection))
        self.tagCollection.addGestureRecognizer(tap)
    }
    func setupFormTableView() {
        self.formTableView.register(UINib(nibName: AddFormTableViewCell.nibName, bundle: nil), forCellReuseIdentifier: AddFormTableViewCell.identifier)
        self.formTableView.rowHeight = 66
        self.formTableHeight.constant = 90
    }
    func setupPageCollectionView() {
        let device = Device.init()
        let width = self.view.bounds.width - 48
        let insets = (self.pageCollectionView.contentInset.top + self.pageCollectionView.contentInset.bottom)
        var height = self.pageCollectionView.frame.height - insets
        let viewHeight = self.view.frame.height
        let bottomHeight = self.bottomView.frame.height
        let restOfScreen: CGFloat = 290
        if device.isOneOf([.iPhoneX,.iPhoneXsMax,.iPhoneXs,.iPhoneXr]) {
            let constant: CGFloat = 44 + 34 // iphoneX top and bottom safe areas
            
            
            height = viewHeight - constant - restOfScreen - 16
            
        } else {
            let constant: CGFloat = 20 // regular iphone top safe areas
            height = viewHeight - restOfScreen - 16 - constant
        }
        (self.pageCollectionView.collectionViewLayout as! UICollectionViewFlowLayout).itemSize = CGSize(width: width, height: height)
        print(height, viewHeight)


        let cellsToRegister: Array<DisplayableCell.Type> = [
            NewPageCollectionViewCell.self,
            PageImageCollectionViewCell.self
        ]
        for cellType in cellsToRegister {
            self.pageCollectionView.register(UINib(nibName: cellType.nibName, bundle: nil), forCellWithReuseIdentifier: cellType.identifier)
            
        }
        
        
        //        let searchBar = UISearchBar()
        //        searchBar.searchBarStyle = .minimal
        //
        //        self.allTableView.tableHeaderView = searchBar
    }
    func setupTagCollectionView() {
        self.tagCollection.register(UINib(nibName: ShowTagsCollectionViewCell.nibName, bundle: nil), forCellWithReuseIdentifier: ShowTagsCollectionViewCell.identifier)
        self.tagCollection.dataSource = self.tagSource
        self.tagSource.tags = [ListFiles.TagModel.init(name: "+ Add Tags...", color: UIColor.lightGray, count: "3")]
        self.tagCollection.collectionViewLayout = LeftAlignedCollectionViewFlowLayout()
        if let collectionViewFlowLayout = self.tagCollection.collectionViewLayout as? UICollectionViewFlowLayout {
            collectionViewFlowLayout.estimatedItemSize = CGSize(width: 120, height: 36)
//            collectionViewFlowLayout.estimatedItemSize = UICollectionViewFlowLayout.automaticSize
            
        }
        self.tagCollection.reloadData()
        self.tagCollection.layoutIfNeeded()
        print(self.tagCollection.collectionViewLayout.collectionViewContentSize)
        self.tagCollectionHeight.constant = self.tagCollection.collectionViewLayout.collectionViewContentSize.height
        self.tagCollection.reloadData()
        self.tagCollection.layoutIfNeeded()
        self.view.layoutIfNeeded()
        
        
//        print(self.tagCollectionHeight.constant)
        
    }
    
    @objc func showFormTemplates() {
        print("templates shown")
        self.refresher?.endRefreshing()
    }
    @objc func showTagSelection() {
        let images: [UIImage] = self.scannerResults
        self.viewModel?.pageImages = images
        
        self.interactor?.saveState(request: ShowFile.SaveFile.Request.init(file: self.viewModel!, pageImages: images) )
        
        self.router?.routeToShowTags(withFolder: false)
    }
    
    
    // MARK: Do something
    var refresher: UIRefreshControl?
    var refresherImage: UIImageView!
    
    var tagSource: TagCollectionSource!
    
    var viewModel: ShowFile.FileModel?
    var editingInfo: Bool? = false
    
    var scanners: [ImageScannerController] = []
    var scannerResults : [UIImage] = []
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    
    @IBOutlet weak var topView: UIView!
    @IBOutlet weak var bottomView: UIView!
    
    @IBOutlet weak var nameField: UITextField!
    @IBOutlet weak var nameFieldContainer: UIView!
    @IBOutlet weak var dateLabel: UILabel!
    @IBOutlet weak var folderButton: UIButton!
    
    @IBOutlet weak var tagCollection: UICollectionView!
    @IBOutlet weak var tagCollectionHeight: NSLayoutConstraint!
    @IBOutlet weak var formTableView: UITableView!
    @IBOutlet weak var formTableHeight: NSLayoutConstraint!
    
    @IBOutlet weak var mapView: MKMapView!
    @IBOutlet weak var notesTextView: UITextView!
    
    @IBOutlet weak var scrollView: UIScrollView!
    
    @IBOutlet weak var pageCollectionView: UICollectionView!
    
    @IBAction func showFolders() {
        self.router?.routeToShowTags(withFolder: true)
    }
//    @IBOutlet weak var
    
    func newScanner() -> ImageScannerController {
        let scannerViewController = ImageScannerController()
        
        scannerViewController.imageScannerDelegate = self
        //        self.scanners.append(scannerViewController)
        
        return scannerViewController
    }
    
    func presentScanner(scanner: ImageScannerController, animated: Bool) {
        present(scanner, animated: animated)
    }
    
    @IBAction func addNewPage() {
        if openToScan {
            self.presentScanner(scanner: self.newScanner(), animated: true)
        } else {
            self.presentScanner(scanner: self.newScanner(), animated: true)
        }
    }
    
    
    
    @IBAction func save() {
        
        let images: [UIImage] = self.scannerResults
        self.viewModel?.pageImages = images
        
        self.interactor?.saveFile(request: ShowFile.SaveFile.Request.init(file: self.viewModel!, pageImages: images) )
    }
    
    @IBAction func cancel() {
        self.dismiss(animated: true, completion: nil)
    }
    
    func fetchFile() {
        self.interactor?.fetchFile()
    }
    
    func displayNewFile(vm: ShowFile.FetchFile.ViewModel) {
        self.openToScan = true
        self.viewModel = vm.file
        
        self.setFileInfo(new: true)
        
    }
    
    func displayFile(vm: ShowFile.FetchFile.ViewModel) {
        self.viewModel = vm.file
        
        self.setFileInfo(new: false)
        
    }
    func addLocationPin(center: CLLocationCoordinate2D) {
        let region = MKCoordinateRegion(center: center, span: MKCoordinateSpan(latitudeDelta: 0.025, longitudeDelta: 0.025))
        self.mapView.setRegion(region, animated: true)
        
        
        let pointAnnotation = MKPointAnnotation()
//        pointAnnotation.pinCustomImageName = "Pokemon Pin"
        pointAnnotation.coordinate = center
        pointAnnotation.title = ""
        
        
//        pinAnnotationView = MKPinAnnotationView(annotation: pointAnnotation, reuseIdentifier: "pin")
        self.mapView.addAnnotation(pointAnnotation)
    }
    func setFileInfo(new: Bool) {
        
        guard let vm = self.viewModel else {
            return
        }
        self.pageCollectionView.reloadData()
        if new {
            self.addLocationPin(center: vm.location!)
            self.nameField.placeholder = self.viewModel?.name
            self.dateLabel.text = vm.date
        } else {
            self.addLocationPin(center: vm.location!)
            self.nameField.text = self.viewModel?.name
            self.dateLabel.text = vm.date
            if vm.notes == "" {
                self.notesTextView.text = "Add Notes..."
                self.notesTextView.textColor = UIColor.lightGray
            } else {
                self.notesTextView.text = vm.notes
                self.notesTextView.textColor = UIColor.black
            }

            
            self.folderButton.setTitle(vm.folder, for: .normal)
            if !vm.pageImages.isEmpty {
                self.scannerResults = vm.pageImages
            }
            if vm.tags.count > 0 {
                self.tagSource.tags = vm.tags
                self.tagCollection.reloadData()
                self.tagCollection.setNeedsLayout()
                self.tagCollection.layoutIfNeeded()
                
                print(self.tagCollection.collectionViewLayout.collectionViewContentSize)
                self.tagCollectionHeight.constant = self.tagCollection.collectionViewLayout.collectionViewContentSize.height
//                apparently this works so that tags are layed out correctly with the right height...
                self.tagCollection.reloadData()
                self.tagCollection.setNeedsLayout()
                self.tagCollection.layoutIfNeeded()
                self.tagCollection.reloadData()
                self.tagCollection.setNeedsLayout()
                self.tagCollection.layoutIfNeeded()
//                self.view.setNeedsLayout()
//                self.view.layoutIfNeeded()
//                self.tagCollection.reloadData()
//                print(self.tagCollection.collectionViewLayout.collectionViewContentSize)
//                print(self.tagCollection.collectionViewLayout.collectionViewContentSize)
//                self.tagCollectionHeight.constant = self.tagCollection.collectionViewLayout.collectionViewContentSize.height + 20
//                self.view.setNeedsLayout()
//                self.view.layoutIfNeeded()
            } else {
                self.tagSource.tags = [ListFiles.TagModel.init(name: "+ Add Tags...", color: UIColor.lightGray, count: "3")]
                self.tagCollection.reloadData()
                print(self.tagCollection.collectionViewLayout.collectionViewContentSize)
                self.tagCollectionHeight.constant = self.tagCollection.collectionViewLayout.collectionViewContentSize.height
                //                self.view.setNeedsLayout()
                //                self.view.layoutIfNeeded()
                self.tagCollection.reloadData()
                print(self.tagCollection.collectionViewLayout.collectionViewContentSize)
            }
            
            
            
        }
        
        
        
        
    }
    
}
extension ShowFileViewController: UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        
        guard let vm = self.viewModel else {
            return 1
        }
        
        return self.scannerResults.count + 1
        
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let index = indexPath.row
        guard let vm = self.viewModel else {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: NewPageCollectionViewCell.identifier, for: indexPath) as! NewPageCollectionViewCell
            cell.setCell()
            
            return cell
        }
        
        guard indexPath.row < self.scannerResults.count else {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: NewPageCollectionViewCell.identifier, for: indexPath) as! NewPageCollectionViewCell
            cell.setCell()
            
            return cell
            
        }
        
        let result = self.scannerResults[index]
//            var image = result.scannedImage
//            if result.doesUserPreferEnhancedImage {
//                image = result.enhancedImage!
//            }
        let image = result
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: PageImageCollectionViewCell.identifier, for: indexPath) as! PageImageCollectionViewCell
        cell.setCell(image: image)
        return cell
        
//        else {
//            guard indexPath.row < vm.pageImages.count else {
//                let cell = collectionView.dequeueReusableCell(withReuseIdentifier: NewPageCollectionViewCell.identifier, for: indexPath) as! NewPageCollectionViewCell
//                cell.setCell()
//                
//                return cell
//
//            }
//            let image = vm.pageImages[index]
//            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: PageImageCollectionViewCell.identifier, for: indexPath) as! PageImageCollectionViewCell
//            cell.setCell(image: image)
//            return cell
//        }
        
        
    }
    
}
extension ShowFileViewController: UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let index = indexPath.item
        guard let vm = self.viewModel else {
            return
        }
        
        guard index < self.scannerResults.count else {
            self.addNewPage()
            return
        }
        
//        let scanner = self.scanners[index]
//        self.presentScanner(scanner: scanner, animated: true)
    }
}

extension ShowFileViewController: UITextFieldDelegate {
    func textFieldShouldBeginEditing(_ textField: UITextField) -> Bool {
        textField.textAlignment = .left
        self.editingInfo = true
        self.snapScroll()
        return true
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        self.viewModel?.name = textField.text!
        self.view.endEditing(true)
        
        
        return false
    }
    func textFieldDidEndEditing(_ textField: UITextField) {
        self.viewModel?.name = textField.text!
    }
}
extension ShowFileViewController: UITextViewDelegate {
    func textViewDidChange(_ textView: UITextView) {
        self.viewModel?.notes = textView.text
    }
    func textViewDidBeginEditing(_ textView: UITextView) {
        if textView.textColor == UIColor.lightGray {
            textView.text = nil
            textView.textColor = UIColor.black
        }
    }
    func textViewDidEndEditing(_ textView: UITextView) {
        if textView.text.isEmpty {
            textView.text = "Add Notes..."
            textView.textColor = UIColor.lightGray
        }
    }
}
extension ShowFileViewController: ImageScannerControllerDelegate {
    
    func imageScannerController(_ scanner: ImageScannerController, didFinishScanningWithResults results: ImageScannerResults) {
        var existingScanner = false
        for (index, sc) in self.scanners.enumerated() {
            if scanner == sc {
                existingScanner = true
                if results.doesUserPreferEnhancedImage {
                    self.scannerResults[index] = results.enhancedImage!
                } else {
                    self.scannerResults[index] = results.scannedImage
                }
                
            }
        }
        if !existingScanner {
            if results.doesUserPreferEnhancedImage {
                self.scannerResults.append(results.enhancedImage!)
            } else {
                self.scannerResults.append(results.scannedImage)
            }
//            self.scannerResults.append(results)
            self.scanners.append(scanner)
        }
        self.pageCollectionView.reloadData()
        self.pageCollectionView.scrollToItem(at: IndexPath(item: self.scannerResults.count - 1, section: 0), at: .centeredHorizontally, animated: false)
        scanner.dismiss(animated: true, completion: nil)
    }
    func imageScannerController(_ scanner: ImageScannerController, didFailWithError error: Error) {
        print("scanner erred", error)
        
    }
    func imageScannerControllerDidCancel(_ scanner: ImageScannerController) {
        scanner.dismiss(animated: true, completion: nil)
    }
}
extension ShowFileViewController: UIScrollViewDelegate {
    
//    func scrollViewDidScroll(_ scrollView: UIScrollView) {
//        if scrollView.contentOffset.y < 400 {
//            scrollView.isScrollEnabled = false
//            scrollView.setContentOffset(CGPoint(x: 0, y: 600), animated: true)
//            scrollView.isScrollEnabled = true
//        }
//    }
//    func scrollViewDidScroll(_ scrollView: UIScrollView) {
//        if scrollView.contentOffset.y <= 0 {
//            var percentage = scrollView.contentOffset.y / 50 * -1
//            
//            if percentage > 1 {
//                percentage = 1.0
//                print(percentage)
//            }
//            self.refresherImage.transform = CGAffineTransform(scaleX: 1 + percentage, y: 1 + percentage)
//        }
// 
//        
//    }
    
    func scrollViewDidEndDragging(_ scrollView: UIScrollView, willDecelerate decelerate: Bool) {
        guard !decelerate else {
            return
        }
        self.snapScroll()
    }
    func scrollViewWillBeginDecelerating(_ scrollView: UIScrollView) {
        self.snapScroll()
    }
    func snapScroll() {
//        https://stackoverflow.com/questions/34573143/uiscrollview-snap-to-position-while-scrolling
        let childStartPoint = scrollView.convert(nameFieldContainer.frame.origin, to: scrollView)
        if let e = editingInfo {
            if e {
                self.nameField.textAlignment = .left
                scrollView.setContentOffset(CGPoint(x: 0, y: childStartPoint.y), animated: true)
            } else {
                self.view.endEditing(true)
                self.nameField.textAlignment = .center
                scrollView.setContentOffset(CGPoint(x: 0, y: 0), animated: true)
            }
            
            
        }
        scrollView.isScrollEnabled = true
    }
    
    func scrollViewWillEndDragging(_ scrollView: UIScrollView, withVelocity velocity: CGPoint, targetContentOffset: UnsafeMutablePointer<CGPoint>) {
        let childStartPoint = scrollView.convert(nameFieldContainer.frame.origin, to: scrollView)
        let direction = targetContentOffset.pointee.y - scrollView.contentOffset.y
//        print(direction)
//        print(scrollView.contentOffset.y)
//        print(targetContentOffset.pointee.y)
        if scrollView.contentOffset.y < childStartPoint.y && velocity.y > 0 {
            scrollView.isScrollEnabled = false
            editingInfo = true
        } else if scrollView.contentOffset.y < childStartPoint.y && velocity.y < 0 {
            scrollView.isScrollEnabled = false
            
            editingInfo = false
            
        }  else if targetContentOffset.pointee.y < childStartPoint.y && scrollView.contentOffset.y > childStartPoint.y {
            scrollView.isScrollEnabled = false
            editingInfo = true
            
        } else if targetContentOffset.pointee.y > childStartPoint.y && scrollView.contentOffset.y > childStartPoint.y {
            //            scrollView.isScrollEnabled = true
            editingInfo = nil
            
        }
//        else if targetContentOffset.pointee.y < childStartPoint.y && velocity.y <= 0 {
//            scrollView.isScrollEnabled = false
//            editingInfo = false
//        } 
        
//        if velocity.y > 0 {
//            targetContentOffset.pointee.y = 600
//
//        } else if velocity.y < 0 {
//            targetContentOffset.pointee.y = 2
//        }

    }
    
}
extension ShowFileViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 1
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: AddFormTableViewCell.identifier) as! AddFormTableViewCell
        return cell
    }
}
